export default class ArraysUtil {
  static flatMapTree = (data: Array<any>, propertyFlat: string) => {
    return data.flatMap(obj => {
      const arrayMap = [obj]
      if (obj[propertyFlat]) {
        const perIds = ArraysUtil.flatMapTree(obj[propertyFlat], propertyFlat)

        arrayMap.push(...perIds)
      }

      return arrayMap
    })
  }

  /**
   *
   * @param data
   * @returns
   */
  static formatTreeData = (data: Array<any>, root: any) => {
    return data.reduce((object, permiss) => {
      const { permissions, ...rest } = permiss // lo·∫°i b·ªè permissions ra kh·ªèi object

      const perId = permiss.orgId ? permiss.orgId : permiss.id

      object[`node-${perId}`] = rest
      object[`node-${perId}`].ids = permiss.id
      object[`node-${perId}`].text = object[`node-${perId}`].name

      object[`node-${perId}`].permission = permiss.permissionValue
      object[`node-${perId}`].orgPermission = permiss.orgPermissionValue
      object[`node-${perId}`].permissionValue = 0
      object[`node-${perId}`].orgPermissionValue = 0
      if (root.includes(`node-${perId}`)) {
        object[`node-${perId}`].state = {
          opened: true,
        }
      }

      if (permiss.permissions?.length)
        object[`node-${perId}`].children = permiss.permissions?.map((item: any) => `node-${item.orgId ? item.orgId : item.id}`)

      return object
    }, {})
  }

  // H√†m l·∫•y ƒë·ªô s√¢u c·ªßa 1 node (root c√≥ depth = 0)
  static getDepthNode = (originalArray, node, map, count = 0) => {
    if (
      node.parentId === null
    || node.parentId === undefined
    || map[node.parentId] === undefined
    || !originalArray[map[node.parentId]]
    || node.parentId === 0
    || node.parentId === node.id
    )
      return count

    count += 1

    return ArraysUtil.getDepthNode(originalArray, originalArray[map[node.parentId]], map, count)
  }

  // H√†m chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ list sang tree
  // Params:
  //    - Array: m·∫£ng d·ªØ li·ªáu truy·ªÅn v√†o
  //    - Id: t√™n thu·ªôc t√≠nh ƒë·ªãnh danh c·ªßa m·ªói node, m·∫∑c ƒë·ªãnh l√† id
  //    - ParentId: t√™n thu·ªôc t√≠nh c·ªßa id parent c·ªßa m·ªói ph·∫ßn t·ª≠, m·∫∑c ƒë·ªãnh l√† parentId, ph·∫ßn t·ª≠ g·ªëc th√¨ thu·ªôc t√≠nh parentId c√≥ gi√° tr·ªã b·∫±ng 0
  //    - Children: t√™n thu·ªôc t√≠nh ch·ª©a c√°c node con c·ªßa node hi·ªán t·∫°i, m·∫∑c ƒë·ªãnh l√† children
  static fromListToTree = (originalArray, id = 'id', parentId = 'parentId', children = 'children', depth = null, rootParentId = 0) => {
  // Clone m·∫£ng ban ƒë·∫ßu ƒë·ªÉ tr√°nh mutate d·ªØ li·ªáu (immutable function)
    const array = JSON.parse(JSON.stringify(originalArray))
    const map: any = {}
    let node
    const tree = []
    let i

    // T·∫°o map object ƒë·ªÉ t√¨m ki·∫øm nhanh index ph·∫ßn t·ª≠ trong m·∫£ng d·ª±a theo ID, ==> ƒë·ªô ph·ª©c t·∫°p O(1)
    for (i = 0; i < array.length; i += 1)
      map[array[i][id]] = i

    // L·∫∑p qua t·ª´ng node, n·∫øu parentId = rootParentId th√¨ push v√†o tree, n·∫øu parentId != rootParentId th√¨ push v√†o children c·ªßa node cha
    for (i = 0; i < array.length; i += 1) {
      node = array[i]
      if (node[parentId] !== rootParentId) {
        if (!depth || ArraysUtil.getDepthNode(array, node, map) <= depth) {
          if (array[map[node[parentId]]] && !array[map[node[parentId]]][children])
            array[map[node[parentId]]][children] = [node]

          else if (array[map[node[parentId]]] && array[map[node[parentId]]][children])
            array[map[node[parentId]]][children].push(node)
        }
      }
      else {
        tree.push(node)
      }
    }

    return tree
  }

  // H√†m t√¨m ki·∫øm t·∫•t c·∫£ c√°c children c·ªßa tree node,
  // Input: m·∫£ng c√°c tree node, id c·ªßa node
  // Output: m·∫£ng c√°c tree id
  // Params:
  //    - Array: c·∫•u tr√∫c m·∫£ng truy·ªÅn v√†o c√≥ parentId
  //    - Id: t√™n thu·ªôc t√≠nh ƒë·ªãnh danh c·ªßa m·ªói node, m·∫∑c ƒë·ªãnh l√† id
  //    - ParentId: id cha c·ªßa c√°c node
  static getAllChildrenOfTreeNode = (originalArray: Array<any>, nodeId: any) => {
    let result = []
    let i
    for (i = 0; i < originalArray.length; i += 1) {
      if (originalArray[i].parentId === nodeId) {
        result.push(originalArray[i].id)

        const children: any = ArraysUtil.getAllChildrenOfTreeNode(originalArray, originalArray[i].id)

        result = result.concat(children)
      }
    }

    return result
  }

  static sliceArray = (array: Array<any>, startIndex?: number, endIndex?: number) => {
    return window._.slice(array, startIndex, endIndex)
  }

  static checkParentNode = (parent: any, objChild: any, obj: any, key: string) => {
    if (parent.parent) {
      objChild.parent.parent = { [key]: parent.parent[key] }
      obj.level++
      ArraysUtil.checkParentNode(parent.parent, objChild.parent, obj, key)
    }
  }

  /**
   * @name: ƒê·ªãnh d·∫°ng c·∫•u tr√∫c c√¢y cho table-tree
   * @param {Array<any>} items => M·∫£ng ph·∫≥ng d·ªØ li·ªáu c·∫ßn ƒë·ªãnh d·∫°ng
   * @param {string} key => key quy ƒë·ªãnh id node cha
   * @return {object}
   */
  static formatTreeTable = (items: Array<any>, key: string) => {
    const result: any = []

    window._.transform(items, (acc, obj: any) => {
      const parent = acc.find((item: any) => item.children && item.children.find((child: any) => child[key] === obj[key]))

      obj.level = 0
      if (parent) {
        obj.parent = { [key]: parent[key] }
        obj.level++
        ArraysUtil.checkParentNode(parent, obj, obj, key)
      }
      acc.push(obj)

      return acc
    }, result)

    return result
  }

  /**
   * @name: ƒê·ªãnh d·∫°ng c·∫•u tr√∫c c√¢y cho v-select-tree
   * @param {Array<any>} items => M·∫£ng ph·∫≥ng d·ªØ li·ªáu c·∫ßn ƒë·ªãnh d·∫°ng
   * @param {string} keyParent => Keyword quy ƒë·ªãnh id node cha
   * @param {string} customId =>  customId cho node
   * @return {object}
   */
  static formatSelectTree = (items: Array<any>, keyParent = 'parentId', customId = 'id') => {
    const orderedNodes = window._.orderBy(items, ['left'], ['desc'])
    const groupedNodes = window._.groupBy(orderedNodes, keyParent)

    return window._.map(groupedNodes['0'], parent => {
      const children = groupedNodes[parent[customId]] || []

      const dataChildren = window._.map(children, child => ({
        ...child,
        ...(groupedNodes[child.id]?.length ? { children: groupedNodes[child[customId]] } : {}),
      }))

      return dataChildren.length ? { ...parent, children: dataChildren } : { ...parent }
    })
  }

  // üëâ IsEmptyArray
  static isEmptyArray = (arr: unknown): boolean => {
    return Array.isArray(arr) && arr.length === 0
  }
}

